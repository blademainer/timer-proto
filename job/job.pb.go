// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: job/job.proto

package job

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	any "github.com/golang/protobuf/ptypes/any"
	common "github.com/pjoc-team/timer-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status 运行状态
type Status int32

const (
	// UNKNOWN 未知状态
	Status_UNKNOWN Status = 0
	// PENDING 等待中
	Status_PENDING Status = 1
	// RUNNING 运行中
	Status_RUNNING Status = 2
	// COMPLETE 完成
	Status_COMPLETE Status = 3
	// FAILED 失败
	Status_FAILED Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "RUNNING",
		3: "COMPLETE",
		4: "FAILED",
	}
	Status_value = map[string]int32{
		"UNKNOWN":  0,
		"PENDING":  1,
		"RUNNING":  2,
		"COMPLETE": 3,
		"FAILED":   4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_job_job_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_job_job_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{0}
}

// TaskStrategy 任务执行策略
type Job_TaskStrategy int32

const (
	// SERIAL 串行执行
	Job_SERIAL Job_TaskStrategy = 0
	// PARALLEL 并行执行
	Job_PARALLEL Job_TaskStrategy = 1
)

// Enum value maps for Job_TaskStrategy.
var (
	Job_TaskStrategy_name = map[int32]string{
		0: "SERIAL",
		1: "PARALLEL",
	}
	Job_TaskStrategy_value = map[string]int32{
		"SERIAL":   0,
		"PARALLEL": 1,
	}
)

func (x Job_TaskStrategy) Enum() *Job_TaskStrategy {
	p := new(Job_TaskStrategy)
	*p = x
	return p
}

func (x Job_TaskStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_TaskStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_job_job_proto_enumTypes[1].Descriptor()
}

func (Job_TaskStrategy) Type() protoreflect.EnumType {
	return &file_job_job_proto_enumTypes[1]
}

func (x Job_TaskStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_TaskStrategy.Descriptor instead.
func (Job_TaskStrategy) EnumDescriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{1, 0}
}

// PutTimerJobRequest 设置计时任务请求
type PutTimerJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id 应用id
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// job 任务内容
	Job *Job `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	// callback 回调
	Callback *common.Target `protobuf:"bytes,3,opt,name=callback,proto3" json:"callback,omitempty"`
}

func (x *PutTimerJobRequest) Reset() {
	*x = PutTimerJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTimerJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTimerJobRequest) ProtoMessage() {}

func (x *PutTimerJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTimerJobRequest.ProtoReflect.Descriptor instead.
func (*PutTimerJobRequest) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{0}
}

func (x *PutTimerJobRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PutTimerJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *PutTimerJobRequest) GetCallback() *common.Target {
	if x != nil {
		return x.Callback
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_id 任务id，在同个app_id下需要保证任务id的唯一性
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// expire 执行时间
	Expire *common.Expire `protobuf:"bytes,3,opt,name=expire,proto3" json:"expire,omitempty"`
	// tasks 需要执行的任务
	Tasks []*Task `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// task_strategy 当tasks超过1个时，指定执行策略
	TaskStrategy Job_TaskStrategy `protobuf:"varint,5,opt,name=task_strategy,json=taskStrategy,proto3,enum=job.Job_TaskStrategy" json:"task_strategy,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Job) GetExpire() *common.Expire {
	if x != nil {
		return x.Expire
	}
	return nil
}

func (x *Job) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Job) GetTaskStrategy() Job_TaskStrategy {
	if x != nil {
		return x.TaskStrategy
	}
	return Job_SERIAL
}

// PutTimerJobResponse 设置计时任务响应
type PutTimerJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 计时器内部唯一id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status 任务状态
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=job.Status" json:"status,omitempty"`
}

func (x *PutTimerJobResponse) Reset() {
	*x = PutTimerJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTimerJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTimerJobResponse) ProtoMessage() {}

func (x *PutTimerJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTimerJobResponse.ProtoReflect.Descriptor instead.
func (*PutTimerJobResponse) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{2}
}

func (x *PutTimerJobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutTimerJobResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

// Task 任务
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task_id
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// target 任务触发时的worker地址
	Target *common.Target `protobuf:"bytes,11,opt,name=target,proto3" json:"target,omitempty"`
	// task_content 任务内容
	TaskContent *any.Any `protobuf:"bytes,2,opt,name=task_content,json=taskContent,proto3" json:"task_content,omitempty"`
	// result 执行结果
	Result *any.Any `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// reason 错误详情。如果status=FAILED，则需要回传错误信息
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// job_id 任务id，在同个app_id下需要保证任务id的唯一性
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// id 内部调度需要使用这个id，在PutJob的时候不要带该ID，因为job_server在接收到请求时会生成一个ID
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// task_name 任务name
	TaskName string `protobuf:"bytes,7,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTarget() *common.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Task) GetTaskContent() *any.Any {
	if x != nil {
		return x.TaskContent
	}
	return nil
}

func (x *Task) GetResult() *any.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Task) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Task) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// InquireJobRequest 检查job状态请求
type InquireJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id 应用id
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// job_id job id
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *InquireJobRequest) Reset() {
	*x = InquireJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquireJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquireJobRequest) ProtoMessage() {}

func (x *InquireJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquireJobRequest.ProtoReflect.Descriptor instead.
func (*InquireJobRequest) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{4}
}

func (x *InquireJobRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *InquireJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// InquireJobResponse 检查job状态响应
type InquireJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 定时器内部id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// job 工作内容
	Job *Job `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	// status job状态
	Status Status `protobuf:"varint,3,opt,name=status,proto3,enum=job.Status" json:"status,omitempty"`
}

func (x *InquireJobResponse) Reset() {
	*x = InquireJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquireJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquireJobResponse) ProtoMessage() {}

func (x *InquireJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquireJobResponse.ProtoReflect.Descriptor instead.
func (*InquireJobResponse) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{5}
}

func (x *InquireJobResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InquireJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *InquireJobResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

// InquireTaskRequest 查询task请求
type InquireTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id 应用id
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// job_id job id
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *InquireTaskRequest) Reset() {
	*x = InquireTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquireTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquireTaskRequest) ProtoMessage() {}

func (x *InquireTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquireTaskRequest.ProtoReflect.Descriptor instead.
func (*InquireTaskRequest) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{6}
}

func (x *InquireTaskRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *InquireTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// InquireTaskResponse 查询task响应
type InquireTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id 定时器内部id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// task 任务内容
	Task *Task `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	// status task状态
	Status Status `protobuf:"varint,3,opt,name=status,proto3,enum=job.Status" json:"status,omitempty"`
}

func (x *InquireTaskResponse) Reset() {
	*x = InquireTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_job_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InquireTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InquireTaskResponse) ProtoMessage() {}

func (x *InquireTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InquireTaskResponse.ProtoReflect.Descriptor instead.
func (*InquireTaskResponse) Descriptor() ([]byte, []int) {
	return file_job_job_proto_rawDescGZIP(), []int{7}
}

func (x *InquireTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InquireTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *InquireTaskResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

var File_job_job_proto protoreflect.FileDescriptor

var file_job_job_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6a, 0x6f, 0x62, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xe8, 0x01, 0x0a, 0x03,
	0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x28, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x52, 0x41,
	0x4c, 0x4c, 0x45, 0x4c, 0x10, 0x01, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x65, 0x0a,
	0x12, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12,
	0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x13,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x32, 0xc8, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b,
	0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x12, 0x17, 0x2e, 0x6a, 0x6f,
	0x62, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x6a,
	0x6f, 0x62, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x6a,
	0x6f, 0x62, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6a, 0x6f, 0x63,
	0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6a, 0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_job_job_proto_rawDescOnce sync.Once
	file_job_job_proto_rawDescData = file_job_job_proto_rawDesc
)

func file_job_job_proto_rawDescGZIP() []byte {
	file_job_job_proto_rawDescOnce.Do(func() {
		file_job_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_job_job_proto_rawDescData)
	})
	return file_job_job_proto_rawDescData
}

var file_job_job_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_job_job_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_job_job_proto_goTypes = []interface{}{
	(Status)(0),                 // 0: job.Status
	(Job_TaskStrategy)(0),       // 1: job.Job.TaskStrategy
	(*PutTimerJobRequest)(nil),  // 2: job.PutTimerJobRequest
	(*Job)(nil),                 // 3: job.Job
	(*PutTimerJobResponse)(nil), // 4: job.PutTimerJobResponse
	(*Task)(nil),                // 5: job.Task
	(*InquireJobRequest)(nil),   // 6: job.InquireJobRequest
	(*InquireJobResponse)(nil),  // 7: job.InquireJobResponse
	(*InquireTaskRequest)(nil),  // 8: job.InquireTaskRequest
	(*InquireTaskResponse)(nil), // 9: job.InquireTaskResponse
	(*common.Target)(nil),       // 10: common.Target
	(*common.Expire)(nil),       // 11: common.Expire
	(*any.Any)(nil),             // 12: google.protobuf.Any
}
var file_job_job_proto_depIdxs = []int32{
	3,  // 0: job.PutTimerJobRequest.job:type_name -> job.Job
	10, // 1: job.PutTimerJobRequest.callback:type_name -> common.Target
	11, // 2: job.Job.expire:type_name -> common.Expire
	5,  // 3: job.Job.tasks:type_name -> job.Task
	1,  // 4: job.Job.task_strategy:type_name -> job.Job.TaskStrategy
	0,  // 5: job.PutTimerJobResponse.status:type_name -> job.Status
	10, // 6: job.Task.target:type_name -> common.Target
	12, // 7: job.Task.task_content:type_name -> google.protobuf.Any
	12, // 8: job.Task.result:type_name -> google.protobuf.Any
	3,  // 9: job.InquireJobResponse.job:type_name -> job.Job
	0,  // 10: job.InquireJobResponse.status:type_name -> job.Status
	5,  // 11: job.InquireTaskResponse.task:type_name -> job.Task
	0,  // 12: job.InquireTaskResponse.status:type_name -> job.Status
	2,  // 13: job.Timer.PutTimerJob:input_type -> job.PutTimerJobRequest
	6,  // 14: job.Timer.InquireJob:input_type -> job.InquireJobRequest
	6,  // 15: job.Timer.InquireTask:input_type -> job.InquireJobRequest
	4,  // 16: job.Timer.PutTimerJob:output_type -> job.PutTimerJobResponse
	7,  // 17: job.Timer.InquireJob:output_type -> job.InquireJobResponse
	7,  // 18: job.Timer.InquireTask:output_type -> job.InquireJobResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_job_job_proto_init() }
func file_job_job_proto_init() {
	if File_job_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_job_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTimerJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTimerJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquireJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquireJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquireTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_job_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InquireTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_job_job_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_job_proto_goTypes,
		DependencyIndexes: file_job_job_proto_depIdxs,
		EnumInfos:         file_job_job_proto_enumTypes,
		MessageInfos:      file_job_job_proto_msgTypes,
	}.Build()
	File_job_job_proto = out.File
	file_job_job_proto_rawDesc = nil
	file_job_job_proto_goTypes = nil
	file_job_job_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimerClient is the client API for Timer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimerClient interface {
	// PutTimerJob 设置计时任务
	PutTimerJob(ctx context.Context, in *PutTimerJobRequest, opts ...grpc.CallOption) (*PutTimerJobResponse, error)
	// InquireJob 检查job状态
	InquireJob(ctx context.Context, in *InquireJobRequest, opts ...grpc.CallOption) (*InquireJobResponse, error)
	// InquireTask 检查task状态
	InquireTask(ctx context.Context, in *InquireJobRequest, opts ...grpc.CallOption) (*InquireJobResponse, error)
}

type timerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerClient(cc grpc.ClientConnInterface) TimerClient {
	return &timerClient{cc}
}

func (c *timerClient) PutTimerJob(ctx context.Context, in *PutTimerJobRequest, opts ...grpc.CallOption) (*PutTimerJobResponse, error) {
	out := new(PutTimerJobResponse)
	err := c.cc.Invoke(ctx, "/job.Timer/PutTimerJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerClient) InquireJob(ctx context.Context, in *InquireJobRequest, opts ...grpc.CallOption) (*InquireJobResponse, error) {
	out := new(InquireJobResponse)
	err := c.cc.Invoke(ctx, "/job.Timer/InquireJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerClient) InquireTask(ctx context.Context, in *InquireJobRequest, opts ...grpc.CallOption) (*InquireJobResponse, error) {
	out := new(InquireJobResponse)
	err := c.cc.Invoke(ctx, "/job.Timer/InquireTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimerServer is the server API for Timer service.
type TimerServer interface {
	// PutTimerJob 设置计时任务
	PutTimerJob(context.Context, *PutTimerJobRequest) (*PutTimerJobResponse, error)
	// InquireJob 检查job状态
	InquireJob(context.Context, *InquireJobRequest) (*InquireJobResponse, error)
	// InquireTask 检查task状态
	InquireTask(context.Context, *InquireJobRequest) (*InquireJobResponse, error)
}

// UnimplementedTimerServer can be embedded to have forward compatible implementations.
type UnimplementedTimerServer struct {
}

func (*UnimplementedTimerServer) PutTimerJob(context.Context, *PutTimerJobRequest) (*PutTimerJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTimerJob not implemented")
}
func (*UnimplementedTimerServer) InquireJob(context.Context, *InquireJobRequest) (*InquireJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquireJob not implemented")
}
func (*UnimplementedTimerServer) InquireTask(context.Context, *InquireJobRequest) (*InquireJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InquireTask not implemented")
}

func RegisterTimerServer(s *grpc.Server, srv TimerServer) {
	s.RegisterService(&_Timer_serviceDesc, srv)
}

func _Timer_PutTimerJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTimerJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServer).PutTimerJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Timer/PutTimerJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServer).PutTimerJob(ctx, req.(*PutTimerJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timer_InquireJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquireJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServer).InquireJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Timer/InquireJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServer).InquireJob(ctx, req.(*InquireJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timer_InquireTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquireJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServer).InquireTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job.Timer/InquireTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServer).InquireTask(ctx, req.(*InquireJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Timer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "job.Timer",
	HandlerType: (*TimerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutTimerJob",
			Handler:    _Timer_PutTimerJob_Handler,
		},
		{
			MethodName: "InquireJob",
			Handler:    _Timer_InquireJob_Handler,
		},
		{
			MethodName: "InquireTask",
			Handler:    _Timer_InquireTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job/job.proto",
}
