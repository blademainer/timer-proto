// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: scheduler/scheduler.proto

package scheduler

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _scheduler_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on HeartbeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	if v, ok := interface{}(m.GetHeartbeatTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeartbeatRequestValidationError{
				field:  "HeartbeatTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HeartbeatRequestValidationError is the validation error returned by
// HeartbeatRequest.Validate if the designated constraints aren't met.
type HeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRequestValidationError) ErrorName() string { return "HeartbeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRequestValidationError{}

// Validate checks the field values on HeartbeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HeartbeatResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HeartbeatResponseValidationError is the validation error returned by
// HeartbeatResponse.Validate if the designated constraints aren't met.
type HeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatResponseValidationError) ErrorName() string {
	return "HeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatResponseValidationError{}

// Validate checks the field values on ScheduleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScheduleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScheduleId

	if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRequestValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHeartbeatInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRequestValidationError{
				field:  "HeartbeatInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHeartbeatTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRequestValidationError{
				field:  "HeartbeatTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRequestValidationError{
				field:  "Report",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastTaskResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleRequestValidationError{
				field:  "LastTaskResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScheduleRequestValidationError is the validation error returned by
// ScheduleRequest.Validate if the designated constraints aren't met.
type ScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleRequestValidationError) ErrorName() string { return "ScheduleRequestValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleRequestValidationError{}

// Validate checks the field values on ScheduleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScheduleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ScheduleResponseValidationError is the validation error returned by
// ScheduleResponse.Validate if the designated constraints aren't met.
type ScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleResponseValidationError) ErrorName() string { return "ScheduleResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleResponseValidationError{}

// Validate checks the field values on CompleteTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompleteTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	if v, ok := interface{}(m.GetNow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteTaskRequestValidationError{
				field:  "Now",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteTaskRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskName

	return nil
}

// CompleteTaskRequestValidationError is the validation error returned by
// CompleteTaskRequest.Validate if the designated constraints aren't met.
type CompleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteTaskRequestValidationError) ErrorName() string {
	return "CompleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteTaskRequestValidationError{}

// Validate checks the field values on CompleteTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompleteTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CompleteTaskResponseValidationError is the validation error returned by
// CompleteTaskResponse.Validate if the designated constraints aren't met.
type CompleteTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteTaskResponseValidationError) ErrorName() string {
	return "CompleteTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteTaskResponseValidationError{}

// Validate checks the field values on SetFailTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetFailTaskRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TaskId

	if v, ok := interface{}(m.GetNow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetFailTaskRequestValidationError{
				field:  "Now",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	return nil
}

// SetFailTaskRequestValidationError is the validation error returned by
// SetFailTaskRequest.Validate if the designated constraints aren't met.
type SetFailTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFailTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFailTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFailTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFailTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFailTaskRequestValidationError) ErrorName() string {
	return "SetFailTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetFailTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFailTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFailTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFailTaskRequestValidationError{}

// Validate checks the field values on SetFailTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetFailTaskResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SetFailTaskResponseValidationError is the validation error returned by
// SetFailTaskResponse.Validate if the designated constraints aren't met.
type SetFailTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFailTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFailTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFailTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFailTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFailTaskResponseValidationError) ErrorName() string {
	return "SetFailTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetFailTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFailTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFailTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFailTaskResponseValidationError{}
