{
  "swagger": "2.0",
  "info": {
    "title": "callback/callback.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Callback"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "JobTaskStrategy": {
      "type": "string",
      "enum": [
        "SERIAL",
        "PARALLEL"
      ],
      "default": "SERIAL",
      "description": "- SERIAL: SERIAL 串行执行\n - PARALLEL: PARALLEL 并行执行",
      "title": "TaskStrategy 任务执行策略"
    },
    "callbackCallbackResponse": {
      "type": "object",
      "title": "CallbackResponse 响应"
    },
    "commonExpire": {
      "type": "object",
      "properties": {
        "expire_at": {
          "type": "string",
          "format": "date-time",
          "title": "expire_at 绝对过期时间"
        },
        "expire_duration": {
          "type": "string",
          "title": "expire_duration 在固定时间后过期"
        }
      },
      "title": "Expire 过期时间"
    },
    "commonGrpcTarget": {
      "type": "object",
      "properties": {
        "grpc_url": {
          "type": "string",
          "title": "grpc_url 任务触发时调用的远程地址，必须是grpc格式"
        }
      }
    },
    "commonHttpTarget": {
      "type": "object",
      "properties": {
        "http_url": {
          "type": "string",
          "title": "http_url 任务触发时调用的远程地址，必须是http格式"
        }
      }
    },
    "commonTarget": {
      "type": "object",
      "properties": {
        "grpc_target": {
          "$ref": "#/definitions/commonGrpcTarget",
          "title": "grpc_target grpc远程目标"
        },
        "http_target": {
          "$ref": "#/definitions/commonHttpTarget",
          "title": "http_target http远程目标"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "jobJob": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string",
          "title": "job_id 任务id，在同个app_id下需要保证任务id的唯一性"
        },
        "expire": {
          "$ref": "#/definitions/commonExpire",
          "title": "expire 执行时间"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/jobTask"
          },
          "title": "tasks 需要执行的任务"
        },
        "task_strategy": {
          "$ref": "#/definitions/JobTaskStrategy",
          "title": "task_strategy 当tasks超过1个时，指定执行策略"
        }
      }
    },
    "jobStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "RUNNING",
        "COMPLETE",
        "FAILED"
      ],
      "default": "UNKNOWN",
      "description": "- UNKNOWN: UNKNOWN 未知状态\n - PENDING: PENDING 等待中\n - RUNNING: RUNNING 运行中\n - COMPLETE: COMPLETE 完成\n - FAILED: FAILED 失败",
      "title": "Status 运行状态"
    },
    "jobTask": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "title": "task_id"
        },
        "target": {
          "$ref": "#/definitions/commonTarget",
          "title": "target 任务触发时的worker地址"
        },
        "task_content": {
          "$ref": "#/definitions/protobufAny",
          "title": "task_content 任务内容"
        },
        "result": {
          "$ref": "#/definitions/protobufAny",
          "title": "result 执行结果"
        },
        "reason": {
          "type": "string",
          "title": "reason 错误详情。如果status=FAILED，则需要回传错误信息"
        },
        "job_id": {
          "type": "string",
          "title": "job_id 任务id，在同个app_id下需要保证任务id的唯一性"
        },
        "id": {
          "type": "string",
          "title": "id 内部调度需要使用这个id，在PutJob的时候不要带该ID，因为job_server在接收到请求时会生成一个ID"
        },
        "task_name": {
          "type": "string",
          "title": "task_name 任务name"
        }
      },
      "title": "Task 任务"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  }
}
